"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.orchestrateEvent = orchestrateEvent;
const openaiService_js_1 = require("./openaiService.js");
const config_js_1 = require("./agents/config.js");
const memoryStore = [];
/**
 * Orchestrates user events in the system and generates an AI message.
 * Persists the activity in Supabase.
 * @param payload - Event payload
 * @returns message generated by OpenAI
 */
function orchestrateEvent(_a) {
    return __awaiter(this, arguments, void 0, function* ({ userId, event, campaignId, agentId }) {
        const config = (0, config_js_1.getAgentConfig)(agentId || 'sales');
        const context = {
            userId,
            campaignId,
            event,
            persona: config.persona,
            memory: config.memory || [],
        };
        // Aquí se puede extender para distintos flujos según agentId
        const message = yield openaiService_js_1.openaiService.generateAgentMessage({
            systemPrompt: config.prompt,
            context,
        });
        // Guardar en memoria si se activa en el futuro
        if (config.memory) {
            memoryStore.push({
                tenantId: userId,
                campaignId: campaignId || '',
                messages: [
                    { role: 'system', content: config.prompt },
                    { role: 'user', content: JSON.stringify(context) },
                ],
            });
        }
        return {
            message,
            agentId,
            contextUsed: context,
        };
    });
}
