import { sendCampaignEmail } from '../services/emailService.js';
import { logUserInteraction } from '../services/loggingService.js';
import { getUserBehaviorData } from '../services/analyticsService.js';
import { openaiService } from './openaiService.js';
import { supabaseAdmin } from '../services/supabase.js';

export type OrchestratorEvent = 'CAMPAIGN_STARTED' | 'CAMPAIGN_VIEWED' | 'ACTION_TAKEN';

export interface OrchestrateEventPayload {
  userId: string;
  campaignId: string;
  event: OrchestratorEvent;
  metadata?: Record<string, any>;
}

/**
 * Orchestrates user events in the system and generates an AI message.
 * Persists the activity in Supabase.
 * @param payload - Event payload
 * @returns message generated by OpenAI
 */
export async function orchestrateEvent(payload: OrchestrateEventPayload): Promise<string> {
  const { userId, campaignId, event, metadata } = payload;
  try {
    if (event === 'CAMPAIGN_STARTED') {
      await sendCampaignEmail(userId, campaignId);
    }
    if (event === 'CAMPAIGN_VIEWED') {
      await getUserBehaviorData(userId);
    }
    // Generar mensaje IA
    const prompt = `Evento: ${event}\nUsuario: ${userId}\nCampa√±a: ${campaignId || 'N/A'}\nMetadata: ${metadata ? JSON.stringify(metadata) : 'N/A'}\nGenera un resumen amigable para el usuario.`;
    const aiResponse = await openaiService.chatCompletion({
      messages: [
        { role: 'system', content: 'Eres un asistente de ventas SaaS.' },
        { role: 'user', content: prompt }
      ]
    });
    const message = aiResponse.choices?.[0]?.message?.content || 'Actividad registrada.';
    await logUserInteraction(userId, campaignId, `AI message generated: ${message}`);
    // Persistir en Supabase
    const { error: dbError } = await supabaseAdmin
      .from('agent_activities')
      .insert({ user_id: userId, event_type: event, campaign_id: campaignId, message });
    if (dbError) {
      await logUserInteraction(userId, campaignId, `DB error: ${dbError.message}`);
      throw new Error('Failed to persist activity: ' + dbError.message);
    }
    return message;
  } catch (error) {
    await logUserInteraction(userId, campaignId, `Error in orchestrator: ${error.message}`);
    throw error;
  }
} 