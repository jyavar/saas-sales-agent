name: Deploy StratoAI Backend

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: |
        if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
          npx eslint src/ --ext .js
        else
          echo "ESLint config not found, skipping lint check"
        fi
        
    - name: Run tests
      run: |
        npm test
        npm run test:integration
        
    - name: Check code formatting
      run: |
        if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
          npx prettier --check src/
        else
          echo "Prettier config not found, skipping format check"
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Check for vulnerabilities
      run: |
        if npm audit --audit-level=high --json | jq '.vulnerabilities | length' | grep -q '^0$'; then
          echo "No high-severity vulnerabilities found"
        else
          echo "High-severity vulnerabilities detected"
          exit 1
        fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/staging'
    
    environment:
      name: staging
      url: https://staging-api.stratoai.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        if npm run build --if-present; then
          echo "Build completed successfully"
        else
          echo "No build script found or build failed"
        fi
        
    - name: Deploy to staging
      env:
        STAGING_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
        STAGING_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
        STAGING_SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        STAGING_STRIPE_SECRET_KEY: ${{ secrets.STAGING_STRIPE_SECRET_KEY }}
        STAGING_RESEND_API_KEY: ${{ secrets.STAGING_RESEND_API_KEY }}
        STAGING_JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
      run: |
        echo "Deploying to staging environment..."
        node scripts/deploy.js staging
        
    - name: Health check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30
        
        # Health check with retry
        for i in {1..5}; do
          if curl -f https://staging-api.stratoai.com/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/5"
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          fi
        done

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://api.stratoai.com
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: |
        if npm run build --if-present; then
          echo "Build completed successfully"
        else
          echo "No build script found or build failed"
        fi
        
    - name: Create backup
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "Creating database backup before deployment..."
        node scripts/backup.js
        
    - name: Deploy to production
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
        RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      run: |
        echo "Deploying to production environment..."
        node scripts/deploy.js production
        
    - name: Health check
      run: |
        echo "Waiting for deployment to be ready..."
        sleep 30
        
        # Health check with retry
        for i in {1..5}; do
          if curl -f https://api.stratoai.com/health; then
            echo "Health check passed"
            break
          else
            echo "Health check failed, attempt $i/5"
            if [ $i -eq 5 ]; then
              echo "Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          fi
        done
        
    - name: Notify deployment
      if: success()
      run: |
        echo "Production deployment completed successfully"
        # Here you could add Slack/Discord notifications
        
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, consider rollback"
        # Here you could add automatic rollback logic